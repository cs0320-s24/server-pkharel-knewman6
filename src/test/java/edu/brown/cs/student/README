# CSV

## Team
- Just me

## Repository Link
https://github.com/cs0320-s24/csv-konewman121

## Design Choices
- Parser is a standalone class that can be used by many other programs, so it has little interaction with other
- Search is intended for the use case of User 1, and uses parser to process the data
- Main uses a REPL to take in user input while searching, and also checks that input for validity, using the Search class
- RowCreator is used by parser to create rows, with a simple implemenation used for Search to create List<String> for each row

### Specific design choices
- Used exact case matching for searching, but allowed case insensitivity for header matching
- Added a parameter to the search to specify if there are headers present
    - this allowed a bit more streamline in malformed row finding and eliminating
- Removed malformed rows from search and listed their contents
    - This was to ensure no incorrectly columned data was searched
- Chose to pass errors up the stack to the parent caller
- Chose to only identify malformed rows if the CSV had headers, otherwise assume everything was fine

## Errors and Bugs
- Known Bug: if the columns have numbered headers and are unordered, they may be referenced incorrectly
    - To replicate, have a CSV with headers that are unordered numbers "1,3,5,2,4", then search by column ID for the 2nd column
- Known Bug: if the CSV has addresses, names, etc. or anything that contains commas in the information,
             this can cause a bug of splitting the single piece of information due to a poorly formatted regex
    - To replicate, have a CVS of addresses and search for an entire address, which will fail

## Tests
### **Unit Tests**: Wrote extensive tests for both parser and search
    - Testing normal functionality and some edge cases of incorrect input or
      potential attempts to access data outside the scope of the assignment
    - Tested multiple invalid inputs in search to make sure the error messages printed correctly
    - tested valid inputs with headers, without headers, and with and without column IDs to check searching operated with all of these
    - tested the removal of malformed rows, as well as the lack of removal when there are no headers
    - tested the printing of malformed rows to inform user of improper formatting
    - tested the regex for improper cases

